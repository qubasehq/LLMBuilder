name: Comprehensive Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  schedule:
    # Run tests daily at 2 AM UTC
    - cron: '0 2 * * *'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.8', '3.9', '3.10', '3.11']
        exclude:
          # Reduce matrix size for faster CI
          - os: windows-latest
            python-version: '3.8'
          - os: macos-latest
            python-version: '3.8'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng tesseract-ocr-fra tesseract-ocr-deu
        tesseract --version

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        brew install tesseract
        tesseract --version

    - name: Install system dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Install Tesseract using chocolatey
        choco install tesseract --yes --no-progress
        # Add Tesseract to PATH
        $tesseractPath = "C:\Program Files\Tesseract-OCR"
        $env:Path += ";$tesseractPath"
        [System.Environment]::SetEnvironmentVariable('Path', [System.Environment]::GetEnvironmentVariable('Path', [System.EnvironmentVariableTarget]::Machine) + ";$tesseractPath", [System.EnvironmentVariableTarget]::Machine)
        # Verify installation
        & "$tesseractPath\tesseract.exe" --version
      shell: powershell

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Verify installation
      run: |
        python -c "import torch; print('PyTorch version:', torch.__version__)"
        python -c "import transformers; print('Transformers version:', transformers.__version__)"
        python -c "import sentence_transformers; print('SentenceTransformers available')"
        tesseract --version

    - name: Create test directories
      run: |
        mkdir -p data/raw data/cleaned data/deduped data/tokens data/finetune
        mkdir -p exports/checkpoints exports/gguf exports/tokenizer
        mkdir -p logs

    - name: Run unit tests
      run: |
        # Temporarily ignore SWIG deprecation warnings
        if [[ "${{ runner.os }}" == "Windows" ]]; then
          set PYTHONPATH=%PYTHONPATH%;%GITHUB_WORKSPACE%;%GITHUB_WORKSPACE%\tools;%GITHUB_WORKSPACE%\export_gguf
          python -W "ignore::DeprecationWarning:pytesseract" -m pytest tests/ -v --tb=short --timeout=300 -x -rA --show-capture=all
        else
          PYTHONPATH=$PYTHONPATH:$GITHUB_WORKSPACE:$GITHUB_WORKSPACE/tools:$GITHUB_WORKSPACE/export_gguf \
          python -W "ignore::DeprecationWarning:pytesseract" -m pytest tests/ -v --tb=short --timeout=300 -x -rA --show-capture=all
        fi
      env:
        # Base PYTHONPATH
        PYTHONPATH: ${{ github.workspace }}
        # Add Tesseract path for Windows
        Path: ${{ runner.os == 'Windows' && 'C:\\Program Files\\Tesseract-OCR;' || '' }}${{ env.Path }}

    - name: Run integration tests (fast)
      run: |
        pytest tests/test_integration.py -v --tb=short --timeout=600 -m "not slow"
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Run performance tests
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      run: |
        pytest tests/test_integration.py::TestPerformanceValidation -v --tb=short --timeout=900
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Test pipeline scripts (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x run.sh
        # Test help and version info
        ./run.sh --help || true
        python scripts/run_ingestion.py --help
        python data/dedup.py --help || true

    - name: Test pipeline scripts (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        # Test PowerShell script
        powershell -ExecutionPolicy Bypass -File run.ps1 -Help
        python scripts/run_ingestion.py --help
      shell: cmd

    - name: Generate coverage report
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      run: |
        pytest tests/ --cov=. --cov-report=xml --cov-report=html --timeout=600
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload coverage to Codecov
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.10'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Upload test artifacts
      if: failure()
      uses: actions/upload-artifact@v4
      with:
        name: test-artifacts-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          logs/
          htmlcov/
          pytest_cache/
        retention-days: 7

  integration-tests:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr tesseract-ocr-eng tesseract-ocr-fra tesseract-ocr-deu

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Create test directories
      run: |
        mkdir -p data/raw data/cleaned data/deduped
        mkdir -p exports/checkpoints exports/gguf exports/tokenizer

    - name: Run slow integration tests
      run: |
        pytest tests/test_integration.py -v --tb=short --timeout=1800 -m "slow"
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Test complete pipeline (minimal)
      run: |
        # Create minimal test data
        echo "This is a test document for the pipeline." > data/raw/test1.txt
        echo "This is another test document." > data/raw/test2.txt
        echo "This is a test document for the pipeline." > data/raw/test3.txt  # Duplicate
        
        # Test ingestion
        python scripts/run_ingestion.py --input data/raw --output data/cleaned --verbose
        
        # Test deduplication
        python data/dedup.py --input-dir data/cleaned --output-dir data/deduped --hash-only
        
        # Verify outputs
        ls -la data/cleaned/
        ls -la data/deduped/
      env:
        PYTHONPATH: ${{ github.workspace }}

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run security scan with bandit
      run: |
        pip install bandit[toml]
        bandit -r . -f json -o bandit-report.json || true

    - name: Run safety check
      run: |
        pip install safety
        safety check --json --output safety-report.json || true

    - name: Upload security artifacts
      uses: actions/upload-artifact@v4
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json
        retention-days: 30

  performance-benchmark:
    runs-on: ubuntu-latest
    if: github.event_name == 'schedule' || (github.event_name == 'push' && github.ref == 'refs/heads/main')
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y tesseract-ocr
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install -r requirements-dev.txt

    - name: Run performance benchmarks
      run: |
        pytest tests/test_integration.py::TestPerformanceValidation --benchmark-only --benchmark-json=benchmark.json
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: benchmark.json
        retention-days: 90

  documentation-check:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'

    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
        pip install -r requirements.txt

    - name: Check documentation links
      run: |
        # Check if all referenced files exist
        python -c "
        import os
        from pathlib import Path
        
        # Check README references
        readme = Path('README.md').read_text()
        references = ['USAGE.md', 'PIPELINE_UPDATES.md', 'INSTALL_TESSERACT.md']
        
        for ref in references:
            if ref in readme and not Path(ref).exists():
                print(f'Missing referenced file: {ref}')
                exit(1)
        
        print('All documentation references valid')
        "

    - name: Validate configuration files
      run: |
        python -c "
        import json
        from pathlib import Path
        
        configs = ['config.json', 'config_gpu.json', 'config_cpu_small.json']
        
        for config_file in configs:
            if Path(config_file).exists():
                try:
                    with open(config_file) as f:
                        json.load(f)
                    print(f'{config_file}: Valid JSON')
                except json.JSONDecodeError as e:
                    print(f'{config_file}: Invalid JSON - {e}')
                    exit(1)
            else:
                print(f'{config_file}: Not found')
        "

  notify:
    runs-on: ubuntu-latest
    needs: [test, integration-tests]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.integration-tests.result == 'success'
      run: |
        echo "✅ All tests passed successfully!"
        
    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.integration-tests.result == 'failure'
      run: |
        echo "❌ Tests failed. Check the logs for details."
        exit 1