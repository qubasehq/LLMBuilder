[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "llmbuilder"
version = "1.0.3"
description = "Complete LLM Training and Deployment Pipeline with CLI"
authors = [{name = "Qubase", email = "contact@qubase.in"}]
maintainers = [{name = "Qubase Team", email = "support@qubase.in"}]
license = {text = "MIT"}
readme = {file = "README.md", content-type = "text/markdown"}
requires-python = ">=3.8"
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Topic :: Text Processing :: Linguistic",
    "Environment :: Console",
    "Framework :: FastAPI",
]
keywords = [
    "llm", "training", "fine-tuning", "machine-learning", "ai", "transformers",
    "cli", "pytorch", "huggingface", "gpt", "llama", "deployment", "inference"
]

dependencies = [
    # Core ML dependencies
    "torch>=2.0.0,<3.0.0",
    "transformers>=4.35.0,<5.0.0",
    "tokenizers>=0.13.0,<1.0.0",
    "sentencepiece>=0.1.99,<1.0.0",
    
    # CLI and UI
    "click>=8.0.0",
    "rich>=13.0.0",
    "tqdm>=4.65.0",
    
    # API and serving
    "fastapi>=0.100.0",
    "uvicorn>=0.20.0",
    "pydantic>=2.0.0",
    
    # Data processing
    "pandas>=2.0.0,<3.0.0",
    "numpy>=1.24.0,<2.0.0",
    "PyMuPDF>=1.23.0,<2.0.0",
    "docx2txt>=0.8,<1.0.0",
    "python-pptx>=0.6.21,<1.0.0",
    "markdown>=3.4.0,<4.0.0",
    "beautifulsoup4>=4.12.0,<5.0.0",
    "ebooklib>=0.18,<1.0.0",
    "pytesseract>=0.3.10,<1.0.0",
    "Pillow>=9.0.0,<11.0.0",
    "requests>=2.28.0,<3.0.0",
    
    # Deduplication and similarity
    "sentence-transformers>=2.2.0,<3.0.0",
    "scikit-learn>=1.3.0,<2.0.0",
    "xxhash>=3.0.0,<4.0.0",
    "langdetect>=1.0.9,<2.0.0",
    
    # Utilities
    "loguru>=0.7.0,<1.0.0",
    "PyYAML>=6.0,<7.0.0",
    "jsonschema>=4.17.0,<5.0.0",
    "psutil>=5.9.0",
    "reportlab>=3.6.0,<5.0.0",
]

[project.optional-dependencies]
# Development dependencies
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
    "pytest-benchmark>=4.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "mypy>=1.0.0",
    "pre-commit>=3.0.0",
    "build>=0.10.0",
    "twine>=4.0.0",
]

# GPU acceleration dependencies
gpu = [
    "peft>=0.6.0,<1.0.0",
    "bitsandbytes>=0.41.0,<1.0.0",
    "accelerate>=0.24.0,<1.0.0",
    "flash-attn>=2.0.0,<3.0.0; sys_platform != 'darwin'",
]

# Documentation dependencies
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.2.0",
    "myst-parser>=0.18.0",
    "sphinx-click>=4.0.0",
    "sphinx-autodoc-typehints>=1.19.0",
]

# Testing dependencies (subset of dev for CI)
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-asyncio>=0.21.0",
    "pytest-xdist>=3.0.0",
    "pytest-timeout>=2.1.0",
]

# Performance monitoring
monitoring = [
    "wandb>=0.15.0",
    "tensorboard>=2.13.0",
    "mlflow>=2.5.0",
]

# Complete installation with all optional dependencies
all = [
    "llmbuilder[dev,gpu,docs,monitoring]"
]

[project.scripts]
llmbuilder = "llmbuilder.cli.ultra_fast:main"
llmb = "llmbuilder.cli.ultra_fast:main"

[project.urls]
Homepage = "https://github.com/qubase/llmbuilder"
Documentation = "https://llmbuilder.readthedocs.io"
Repository = "https://github.com/qubase/llmbuilder"
Issues = "https://github.com/qubase/llmbuilder/issues"
Changelog = "https://github.com/qubase/llmbuilder/blob/main/CHANGELOG.md"

[tool.setuptools]
zip-safe = false
include-package-data = true

[tool.setuptools.packages.find]
where = ["."]
include = ["llmbuilder*"]
exclude = ["tests*", "docs*", "examples*", "scripts*", "debug_scripts*"]

[tool.setuptools.package-data]
llmbuilder = [
    "templates/**/*",
    "configs/**/*",
    "py.typed",
    "*.json",
    "*.yaml",
    "*.yml",
]

[tool.setuptools.dynamic]
version = {attr = "llmbuilder.__version__"}

# Entry points for plugin system
[project.entry-points."llmbuilder.plugins"]
# Future plugin system entry points can be added here

# Console scripts
[project.entry-points."console_scripts"]
llmbuilder = "llmbuilder.cli.ultra_fast:main"
llmb = "llmbuilder.cli.ultra_fast:main"

# Development tools configuration
[tool.black]
line-length = 88
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | dist
)/
'''

[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["llmbuilder"]

[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*",
    "sentencepiece.*",
    "fitz.*",
    "docx2txt.*",
    "ebooklib.*",
    "pytesseract.*",
]
ignore_missing_imports = true

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-ra -q --strict-markers --strict-config"
testpaths = ["tests"]
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "gpu: marks tests that require GPU",
]

[tool.coverage.run]
source = ["llmbuilder"]
omit = [
    "*/tests/*",
    "*/test_*",
    "setup.py",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]